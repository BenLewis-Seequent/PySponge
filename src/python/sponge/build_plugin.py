
import os
import subprocess
import pkg_resources
import zipfile
import urllib2

import main as m

# url of the ivy artifact
ivy_url = "http://www.us.apache.org/dist//ant/ivy/2.4.0/apache-ivy-2.4.0-bin-with-deps.zip"


def plugin(plugin_id, name, version, sponge_api_version="2.1-SNAPSHOT", main="__main__", build_dir ='build'):
    # create build directory if empty
    if not os.path.exists(build_dir):
        os.mkdir(build_dir)
    ivy = _setup_ivy(build_dir)

    # ivy config files
    ivy_file_name = os.path.join(build_dir, "ivy.xml")
    ivy_file = file(ivy_file_name, "w")
    ivy_file.write(_gen_ivy_file(sponge_api_version))
    ivy_file.close()
    ivy_settings_file = pkg_resources.resource_filename(
        "sponge", "ivysettings.xml")

    # file that will hold the classpath to use for compilation
    # this will be generated by ivy
    classpath_filename = os.path.join(build_dir, "classpath.txt")
    # run ivy
    subprocess.call(["java", "-jar", ivy,
                     "-ivy", ivy_file_name,
                     "-settings", ivy_settings_file,
                     "-cachepath", classpath_filename])

    # read in the classpath
    classpath_file = open(classpath_filename)
    classpath = classpath_file.read()
    classpath_file.close()

    # create source directory
    src_dir = os.path.join(build_dir, "src")
    package_dir = os.path.join(src_dir, *plugin_id.split('.'))
    if not os.path.exists(package_dir):
        os.makedirs(package_dir)

    # create java plugin file
    plugin_class = _gen_source(plugin_id, name, version, main)
    plugin_class_filename = os.path.join(package_dir, "PyPlugin.java")
    plugin_class_file = file(plugin_class_filename, 'w')
    plugin_class_file.write(plugin_class)
    plugin_class_file.close()

    classes_dir = os.path.join('build', 'classes')
    if not os.path.exists(classes_dir):
        os.mkdir(classes_dir)

    # compile the java plugin class
    subprocess.call(["javac",
                     "-cp", classpath,
                     "-d", classes_dir,
                     plugin_class_filename])

    # create the jar
    jar = zipfile.ZipFile(os.path.join('build', plugin_id + '.jar'), mode="w")

    def add_jar_entry(arg, dirname, fnames):
        for fname in fnames:
            fname = os.path.join(dirname, fname)
            if os.path.isfile(fname):
                rel = os.path.relpath(fname, arg)
                jar.write(fname, rel)

    os.path.walk(classes_dir, add_jar_entry, classes_dir)
    jar.close()


def _setup_ivy(build_dir):
    base_ivy_path = os.path.join(build_dir, 'ivy')
    if not os.path.exists(base_ivy_path):
        os.mkdir(base_ivy_path)
    ivy_path = os.path.join(base_ivy_path, 'apache-ivy-2.4.0', 'ivy-2.4.0.jar')
    if not os.path.exists(ivy_path):
        # if ivy cannot be found download it
        # following is copied from http://stackoverflow.com/a/22776/2609357
        ivy_zip_name = os.path.join(base_ivy_path, 'apache-ivy-2.4.0-bin-with-deps.zip')
        u = urllib2.urlopen(ivy_url)
        f = open(ivy_zip_name, 'wb')
        meta = u.info()
        file_size = int(meta.getheaders("Content-Length")[0])
        print "Downloading: %s Bytes: %s" % (ivy_zip_name, file_size)

        file_size_dl = 0
        block_sz = 8192
        while True:
            buffer = u.read(block_sz)
            if not buffer:
                break

            file_size_dl += len(buffer)
            f.write(buffer)
            status = r"%10d  [%3.2f%%]" % (file_size_dl, file_size_dl * 100. / file_size)
            status = status + chr(8)*(len(status)+1)
            print status,

        f.close()
        # unpack the downloaded zip file
        ivy_zip = zipfile.ZipFile(ivy_zip_name)
        ivy_zip.extractall(base_ivy_path)
        ivy_zip.close()
    return ivy_path


def _gen_ivy_file(api_version):
    return """<ivy-module version="2.0">
  <info organisation="com.skinny121"
        module="PySponge"/>
  <dependencies>
      <dependency org="org.spongepowered" name="spongeapi" rev="{}"/>
      <dependency org="org.python" name="jython-standalone" rev="2.7.0"/>
  </dependencies>
</ivy-module>""".format(api_version)


def _gen_source(id, name, version, main):
    if main.endswith(".py"):
        main = main[:-3]
    return """// file is auto generated by build_plugin.py
package {};
import org.spongepowered.api.event.Listener;
import org.spongepowered.api.event.game.state.GameConstructionEvent;
import org.spongepowered.api.plugin.Plugin;

import org.python.util.PythonInterpreter;
import org.python.core.PyStringMap;
import org.python.core.Py;
import org.python.core.PySystemState;

@Plugin(id = "{}", name = "{}", version = "{}")
public class PyPlugin {{
    @Listener
    public void init(GameConstructionEvent e) {{
        PySystemState.initialize();
        PyStringMap locals = new PyStringMap();
        locals.__setitem__("this", Py.java2py(this));

        PythonInterpreter interpreter = new PythonInterpreter(locals);
        interpreter.exec(
            "import sys; sys.path.append(\\"{}\\"); import {} as m; m.start(this)");
    }}
}}
""".format(id, id, name, version, os.getcwd(), main)
